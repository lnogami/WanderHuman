import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:wanderhuman_app/components/button.dart';
import 'package:wanderhuman_app/utilities/color_palette.dart';
import 'package:wanderhuman_app/utilities/dimension_adapter.dart';
import 'package:wanderhuman_app/view/home/widgets/utility_functions/my_animated_snackbar.dart';
import 'package:wanderhuman_app/view/login/register_account.dart';
import 'package:wanderhuman_app/view/login/widgets/textfield.dart';

class RegisterAccountForm extends StatefulWidget {
  final BorderRadius? borderRadius;
  final String email;
  final String password;

  const RegisterAccountForm({
    super.key,
    this.borderRadius,
    required this.email,
    required this.password,
  });

  @override
  State<RegisterAccountForm> createState() => _RegisterAccountFormState();
}

// "other" in this enum means no value yet
enum UserType { admin, caregiver, other }

enum Gender { male, female, other }

class _RegisterAccountFormState extends State<RegisterAccountForm> {
  UserType currentUserTypeGroupvalue = UserType.other;
  Gender currentGroupGenderValue = Gender.other;

  // THIS IS A LIST OF FIELDS BASED ON THE DATABASE ARCHITECTURE
  // email and password are passed from the login form
  // id is auto-generated by Firebase Authentication
  TextEditingController nameController = TextEditingController();
  // userType is a Radio button
  // gender is a Radio button too
  TextEditingController contactNumberController = TextEditingController();
  TextEditingController addressController = TextEditingController();
  // notableTrait = null, because this is for Admin and Caregiver registration Form
  // profilePictureURl is a button to select picture, not sure about this yet
  // createdAt is auto-generated base on timeStamp
  // lastUpdatedAt = createdAt
  // registeredBy = "", this is for patients only
  // assignedCaregiver = "", this is for patients only
  // deviceID = "", this is for patients only
  // email is provided by this class
  // status is automatically true by creation

  // FOR SIGN UP
  Future<void> createUserWithEmailAndPassword() async {
    try {
      // final password = passwordController.text.trim();
      // final confirmPassword = confirmPasswordController.text.trim();

      // if (password.length <= 6) {
      //   print("Password is too weak");
      // }

      // validates if the password and comfirmPassword contains the same value
      if (widget.password.trim() == widget.password.trim()) {
        final userCredential = await FirebaseAuth.instance
            .createUserWithEmailAndPassword(
              email: widget.email.trim(),
              password: widget.password.trim(),
            );
        print(" ✅✅✅ SIGNED UP: $userCredential");
      }
    } on FirebaseAuthException catch (e) {
      print("❌❌❌❌❌❌❌ ${e.message}");
    }
  }

  @override
  void dispose() {
    super.dispose();
    nameController.dispose();
    contactNumberController.dispose();
    addressController.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      width: MyDimensionAdapter.getWidth(context),
      height: MyDimensionAdapter.getHeight(context),
      padding: EdgeInsets.only(top: 50),
      decoration: BoxDecoration(
        borderRadius: borderRadius(),
        color: MyColorPalette.lightBlue,
      ),
      child: Column(
        children: [
          MyCustTextfield(
            labelText: "Name",
            prefixIcon: Icons.person_rounded,
            textController: nameController,
            borderRadius: 10,
          ),
          SizedBox(height: 15),
          Container(
            height: 120,
            padding: EdgeInsets.only(left: 5, right: 5),
            // color: Colors.green,  // for debugging purposes only
            child: Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                userTypeGroupedRadioButton(),
                verticalLineBorder(),
                genderGroupedRadioButton(),
              ],
            ),
          ),
          SizedBox(height: 15),
          MyCustTextfield(
            labelText: "Contact Number",
            prefixIcon: Icons.call_rounded,
            textController: contactNumberController,
            borderRadius: 10,
          ),
          SizedBox(height: 15),
          MyCustTextfield(
            labelText: "Address",
            prefixIcon: Icons.person_rounded,
            textController: addressController,
            borderRadius: 10,
          ),
          SizedBox(height: 30),
          MyCustButton(
            buttonText: "CONFIRM REGISTRATION",
            buttonWidth: 250,
            buttonTextColor: Colors.white,
            onTap: () {
              try {
                print("✅✅✅✅✅✅");
                createUserWithEmailAndPassword();
                // to wait for the account authentication to finish first
                Future.delayed(Duration(milliseconds: 15000), () {
                  FirebaseFirestore.instance.collection("Personal Info").add({
                    // "name": nameController.text.trim(),
                    // "userType": currentUserTypeGroupvalue.toString().split('.').last,
                    "id": FirebaseAuth.instance.currentUser!.uid,
                    "name": nameController.text.trim(),
                    "userType": currentUserTypeGroupvalue.name,
                    "gender": currentGroupGenderValue.name,
                    "contactNumber": contactNumberController.text.trim(),
                    "address": addressController.text.trim(),
                    "notableTrait":
                        "", // empty String, as this is for patients only
                    "profilePictureURL": "", // to be updated later
                    "createdAt": FieldValue.serverTimestamp(),
                    "lastUpdatedAt": FieldValue.serverTimestamp(),
                    "registeredBy":
                        "", // empty String, as this is for patients only
                    "assignedCaregiver":
                        "", // empty String, as this is for patients only
                    "deviceID":
                        "", // to be updated later, this one can be null at account creation but can have a value later on when added.
                    "email": widget.email.trim(),

                    // "status" : true,  // to be decided later, if ibutang ba jud ni
                  });
                });
                // to remove this sheet, and proceed to Home Page
                Navigator.pop(context);
                showMyAnimatedSnackBar(
                  context: context,
                  dataToDisplay: FirebaseAuth.instance.currentUser!.uid
                      .toString(),
                );
              } catch (e) {
                print("Error during registration: $e");
                showMyAnimatedSnackBar(
                  context: context,
                  dataToDisplay: e.toString(),
                );
              }
              // print("CONFIRM SIGNUP BUTTON PRESSEDDDDDDDDDDDDDDDDDDDDDDDDDD");
            },
          ),
          SizedBox(height: 10),
          // Cancel button
          cancelButton(),
        ],
      ),
    );
  }

  Container verticalLineBorder() {
    return Container(
      width: 1,
      height: double.infinity,
      color: const Color.fromARGB(255, 123, 184, 234),
    );
  }

  Container userTypeGroupedRadioButton() {
    return Container(
      // color: Colors.amber, // for debugging purposes only
      width: MyDimensionAdapter.getWidth(context) * 0.50,
      child: Column(
        children: [
          SizedBox(height: 6),
          radioListTileButtonsTitle("Role (User Type)"),
          myUserTypeRadioListTileBuilder(
            title: "Admin",
            enumValue: UserType.admin,
          ),
          myUserTypeRadioListTileBuilder(
            title: "Caregiver",
            enumValue: UserType.caregiver,
          ),
        ],
      ),
    );
  }

  Container genderGroupedRadioButton() {
    return Container(
      width: MyDimensionAdapter.getWidth(context) * 0.44,
      // color: Colors.orange, // for debugging purposes only
      child: Column(
        children: [
          SizedBox(height: 6),
          radioListTileButtonsTitle("Gender"),
          myGenderRadioListTileBuilder(title: "Male", enumValue: Gender.male),
          myGenderRadioListTileBuilder(
            title: "Female",
            enumValue: Gender.female,
          ),
        ],
      ),
    );
  }

  Text radioListTileButtonsTitle(String title) {
    return Text(
      title,
      overflow: TextOverflow.ellipsis,
      style: TextStyle(
        fontSize: 16,
        fontWeight: FontWeight.w600,
        color: const Color.fromARGB(255, 68, 157, 230),
      ),
    );
  }

  Container myUserTypeRadioListTileBuilder({
    required String title,
    required dynamic enumValue,
  }) {
    return Container(
      // color: Colors.grey,    // for debugging purposes only
      height: 35,
      margin: EdgeInsets.only(top: 5),
      child: RadioListTile.adaptive(
        activeColor: Colors.blue,
        fillColor: WidgetStateProperty.resolveWith(
          (states) => states.contains(WidgetState.selected)
              ? Colors.blue
              : const Color.fromARGB(255, 125, 184, 236),
        ),
        title: Text(
          title,
          overflow: TextOverflow.ellipsis,
          style: TextStyle(
            fontSize: 14,
            color: Colors.blue,
            fontWeight: FontWeight.w500,
          ),
        ),
        value: enumValue,
        groupValue: currentUserTypeGroupvalue,
        dense: true,
        useCupertinoCheckmarkStyle: true,
        onChanged: (value) {
          setState(() {
            currentUserTypeGroupvalue = value!;
          });
        },
      ),
    );
  }

  Container myGenderRadioListTileBuilder({
    required String title,
    required dynamic enumValue,
  }) {
    return Container(
      // color: Colors.grey,    // for debugging purposes only
      height: 35,
      margin: EdgeInsets.only(top: 5),
      child: RadioListTile.adaptive(
        fillColor: WidgetStateProperty.resolveWith(
          (states) => states.contains(WidgetState.selected)
              ? Colors.blue
              : const Color.fromARGB(255, 125, 184, 236),
        ),
        title: Text(
          title,
          overflow: TextOverflow.ellipsis,
          style: TextStyle(
            fontSize: 14,
            color: Colors.blue,
            fontWeight: FontWeight.w500,
          ),
        ),
        value: enumValue,
        groupValue: currentGroupGenderValue,
        dense: true,
        useCupertinoCheckmarkStyle: true,
        onChanged: (value) {
          setState(() {
            currentGroupGenderValue = value!;
          });
        },
      ),
    );
  }

  // this is just literally a Cancel button
  MyCustButton cancelButton() {
    return MyCustButton(
      onTap: () {
        setState(() {
          Navigator.pop(context);
        });
      },
      buttonText: "CANCEL",
      color: Colors.white,
      buttonTextFontWeight: FontWeight.w400,
      buttonTextColor: MyColorPalette.fontColorB,
      enableShadow: false,
      borderWidth: 0.5,
      borderColor: Colors.white,
    );
  }
}
